package database

import (
	"fmt"
)

// GetUsersOrExecutorsLastId возвращает последний идентификатор пользователей или исполнителей из метаданных.
// Функция принимает булево значение isUser, которое указывает, нужно ли получить последний идентификатор пользователей.
// Возвращает последний идентификатор и ошибку. В случае ошибки, возвращается -1.
func GetUsersOrExecutorsLastId(isUser bool) (int, error) {
	// Открываем соединение с базой данных
	db, err := DB()
	if err != nil {
		// Если произошла ошибка при открытии соединения, возвращаем -1 и ошибку
		return -1, err
	}
	defer db.Close() // Закрываем соединение с базой данных после завершения функции.

	// Определяем целевую таблицу для запроса (пользователи или исполнители)
	target := "executors"
	if isUser {
		target = "users"
	}

	// Формируем строку запроса SQL с использованием целевой таблицы
	query := fmt.Sprintf("SELECT %s FROM metadata", target)

	// Выполняем запрос к базе данных
	res := db.QueryRow(query)

	// Считываем значение идентификатора из результата запроса
	var id int
	err = res.Scan(&id)
	if err != nil {
		// Если произошла ошибка при сканировании значения, возвращаем -1 и ошибку
		return -1, err
	}

	// Возвращаем последний идентификатор и ошибку (если есть)
	return id, nil
}

// ChangeUsersOrExecutorsLastId обновляет последний идентификатор пользователей или исполнителей в метаданных.
// Она принимает идентификатор и булево значение, указывающее, является ли целью обновления пользователь или исполнитель.
// Если произошла ошибка при подключении к базе данных или выполнении запроса, функция возвращает ошибку.
func ChangeUsersOrExecutorsLastId(id int, isUser bool) error {
	// Получаем подключение к базе данных.
	db, err := DB()
	if err != nil {
		return err
	}
	defer db.Close() // Закрываем соединение с базой данных после завершения функции.

	// Определяем цель обновления в зависимости от значения isUser.
	target := "executors"
	if isUser {
		target = "users"
	}

	// Формируем запрос SQL для обновления метаданных.
	query := fmt.Sprintf("UPDATE metadata SET %s = $1 WHERE id = 1", target)

	// Выполняем запрос с переданным идентификатором.
	_, err = db.Exec(query, id)
	if err != nil {
		return err
	}

	return nil
}
